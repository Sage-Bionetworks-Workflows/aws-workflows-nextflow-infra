AWSTemplateFormatVersion: '2010-09-09'
Description: Nextflow Tower ECS Task Definition template
Parameters:
  TowerSmtpHost:
    Type: String
    Description: SMTP server hostname
  TowerSmtpPort:
    Type: String
    Description: SMTP server port
  TowerSmtpUser:
    Type: String
    Description: SMTP server username
    NoEcho: 'true'
  TowerSmtpPassword:
    Type: String
    Description: SMTP server password
    NoEcho: 'true'
  TowerContactEmail:
    Type: String
    Description: Email for login emails
  TowerServerUrl:
    Type: String
    Description: IP address of container instance
  TowerJwtSecret:
    Type: String
    Description: '>256 bit random string'
    NoEcho: 'true'
  TowerCryptoSecretkey:
    Type: String
    Description: '>256 bit random string'
    NoEcho: 'true'
  TowerLicense:
    Type: String
    Description: The Tower License
    NoEcho: 'true'
  TowerDbUrl:
    Type: String
    Description: MySQL DB connection URL
  TowerDbUser:
    Type: String
    Description: MySQL DB username
    NoEcho: 'true'
  TowerDbPassword:
    Type: String
    Description: MySQL DB password
    NoEcho: 'true'
  TowerGoogleClientId:
    Type: String
    Description: The client id provided by Google for the OAuth app
    NoEcho: 'true'
  TowerGoogleSecret:
    Type: String
    Description: The client secret provided by Google for the OAuth app
    NoEcho: 'true'
  TowerOidcClientId:
    Type: String
    Default: 'NULL'
    Description: The client ID provided by your authentication service
    NoEcho: 'true'
  TowerOidcSecret:
    Type: String
    Default: 'NULL'
    Description: >
      The client secret provided by your authentication service.
      Ignored if `TowerOidcClientId` is undefined.
    NoEcho: 'true'
  TowerOidcIssuer:
    Type: String
    Default: 'NULL'
    Description: >
      The authentication service URL to which Tower connects to authenticate
      the sign-in request. Ignored if `TowerOidcClientId` is undefined.
  TowerRedisUrl:
    Type: String
    Default: 'NULL'
    Description: Redis connection URL
{%- if sceptre_user_data.EnableRedisDocker is defined and sceptre_user_data.EnableRedisDocker %}
  RedisContainerName:
    Type: String
    Description: (Optional) Name of the container that runs redis
    Default: redis
  RedisContainerImage:
    Type: String
    Description: Redis container docker image, e.g. 'redis:5.0.8'
{%- endif %}
  MigrateDBContainerName:
    Type: String
    Description: (Optional) Name of the migrate-db container
    Default: migrate-db
  MigrateDBContainerImage:
    Type: String
    Description: >
      (Optional) migrate-db container docker image,
      e.g. 'cr.seqera.io/private/nf-tower-enterprise/migrate-db:v23.4.3'
  CronContainerName:
    Type: String
    Description: (Optional) Name of the cron container
    Default: cron
  CronContainerImage:
    Type: String
    Description: >
      (Optional) Cron container docker image,
      e.g. 'cr.seqera.io/private/nf-tower-enterprise/backend:v21.06.0'
  FrontendContainerName:
    Type: String
    Description: (Optional) Name of the container that runs the tower ui
    Default: frontend
  FrontendContainerImage:
    Type: String
    Description: >
      Frontend container docker image,
      e.g. 'cr.seqera.io/private/nf-tower-enterprise/frontend:v21.06.0'
  FrontendContainerPort:
    Type: Number
    Description: (Optional) Port to open in frontend container
    Default: 80
  FrontendHostPort:
    Type: Number
    Description: (Optional) Port to open on host for frontend container
    Default: 80
  BackendContainerName:
    Type: String
    Description: (Optional) Name of the container that runs the tower server
    Default: backend
  BackendContainerImage:
    Type: String
    Description: >
      Backend container docker image,
      e.g. 'cr.seqera.io/private/nf-tower-enterprise/backend:v21.06.0'
  BackendContainerPort:
    Type: Number
    Description: (Optional) Port to open in backend container
    Default: 8080
  BackendHostPort:
    Type: Number
    Description: (Optional) Port to open on host for backend container
    Default: 8080
  EfsFileSystemId:
    Type: String
    Description: The ID of the EFS file system to mount as a volume
  EfsVolumeName:
    Type: String
    Description: The name of the EFS file system mounted as a volume
    Default: 'efs_volume'
  EfsVolumeMountPath:
    Type: String
    Description: Path where the EFS volume container tower configuration is mounted
  TowerRootUsers:
    Type: List<String>
    Default: ""
    Description: Comma-separated list of user emails
  TowerConfigFileName:
    Type: String
    Description: Name of the tower config YAML file
  TowerOidcTokenImport:
    Type: String
    Description: Whether to import the OIDC refresh token (JWT) as a user secret
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  TowerUserWorkspace:
    Type: String
    Description: Whether to enable private Tower workspaces for each user
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  AwslogsStreamPrefix:
    Type: String
    Description: Prefix used for CloudWatch log streams
    Default: 'tower'
Conditions:
  HasTowerOidcClient: !Not [!Equals [ !Ref TowerOidcClientId, "NULL"]]
  HasTowerRootUsers: !Not [!Equals [!Join [",", !Ref TowerRootUsers], ""]]
Resources:
  TowerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/ecs/task/nf-tower'
      RetentionInDays: 30

  TowerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: bridge
      Volumes:
        - Name: !Ref EfsVolumeName
          EFSVolumeConfiguration:
            FilesystemId: !Ref EfsFileSystemId
      ContainerDefinitions:
        - image: !Ref MigrateDBContainerImage
          repositoryCredentials:
            credentialsParameter: !Sub 'arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:TOWER_DEV_SEQERA_REGISTRY_SECRET'
        - image: !Ref FrontendContainerImage
          repositoryCredentials:
            credentialsParameter: !Sub 'arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:TOWER_DEV_SEQERA_REGISTRY_SECRET'
        - image: !Ref BackendContainerImage
          repositoryCredentials:
            credentialsParameter: !Sub 'arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:TOWER_DEV_SEQERA_REGISTRY_SECRET'
        - image: !Ref CronContainerImage
          repositoryCredentials:
            credentialsParameter: !Sub 'arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:TOWER_DEV_SEQERA_REGISTRY_SECRET'
      {%- if sceptre_user_data.EnableRedisDocker is defined and sceptre_user_data.EnableRedisDocker %}
        # The following container definition is a stop-gap solution for
        # https://sagebionetworks.jira.com/browse/WORKFLOWS-521
        - Name: !Sub '${RedisContainerName}-CheckAOF'
          Image: !Ref RedisContainerImage
          Memory: 2000
          Cpu: 0
          Essential: false
          EntryPoint:
            - /bin/sh
          # The `yes` command is needed because `redis-check-aof` has an
          # interactive prompt and doesn't have an option to disable it
          # Use parentheses around the piped commands to enforce order
          # between `|` and `&&` operators, and wrap the entire string
          # in double-quotes to prevent YAML parsing of the `|` operator.
          Command:
            - -c
            - "echo 'start redis-check-aof' && (date) && ( yes | redis-check-aof --fix appendonly.aof ) && echo 'redis-check-aof complete' && (date)"
          MountPoints:
            - ContainerPath: /data
              SourceVolume: !Ref EfsVolumeName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Ref TowerTaskLogGroup
              awslogs-stream-prefix: !Ref AwslogsStreamPrefix
        - Name: !Ref RedisContainerName
          Image: !Ref RedisContainerImage
          Memory: 2000
          Cpu: 0
          DependsOn:
            - ContainerName: !Sub '${RedisContainerName}-CheckAOF'
              Condition: SUCCESS
          PortMappings:
            - ContainerPort: 6379
              HostPort: 6379
          Command:
            - --appendonly yes
          MountPoints:
            - ContainerPath: /data
              SourceVolume: !Ref EfsVolumeName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Ref TowerTaskLogGroup
              awslogs-stream-prefix: !Ref AwslogsStreamPrefix
      {%- endif %}
        - Name: !Ref MigrateDBContainerName
          Image: !Ref MigrateDBContainerImage
          Memory: 2000
          Cpu: 0
          Essential: false
      {%- if sceptre_user_data.EnableRedisDocker is defined and sceptre_user_data.EnableRedisDocker %}
          Links:
            - !Ref RedisContainerName
          DependsOn:
            - ContainerName: !Ref RedisContainerName
              Condition: START
      {%- endif %}
          WorkingDirectory: /work
          EntryPoint:
            - /bin/sh
          Command:
            - -c
            - /migrate-db.sh
          Environment:
            {%- for name, value in sceptre_user_data.environment.items() %}
            - Name: {{ name }}
              Value: {{ value }}
            {%- endfor %}
          MountPoints:
            - ContainerPath: !Ref EfsVolumeMountPath
              ReadOnly: true
              SourceVolume: !Ref EfsVolumeName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Ref TowerTaskLogGroup
              awslogs-stream-prefix: !Ref AwslogsStreamPrefix
        - Name: !Ref CronContainerName
          Image: !Ref CronContainerImage
          Memory: 2000
          Cpu: 0
      {%- if sceptre_user_data.EnableRedisDocker is defined and sceptre_user_data.EnableRedisDocker %}
          Links:
            - !Ref RedisContainerName
      {%- endif %}
          DependsOn:
      {%- if sceptre_user_data.EnableRedisDocker is defined and sceptre_user_data.EnableRedisDocker %}
            - ContainerName: !Ref RedisContainerName
              Condition: START
      {%- endif %}
            - ContainerName: !Ref MigrateDBContainerName
              Condition: SUCCESS
          WorkingDirectory: /work
          EntryPoint:
            - /bin/sh
          Command:
            - -c
            - /tower.sh
          Environment:
            - Name: MICRONAUT_ENVIRONMENTS
              Value: !If
                - HasTowerOidcClient
                - prod,redis,cron,workspace,awsbatch-platform,auth-google,auth-oidc
                - prod,redis,cron,workspace,awsbatch-platform,auth-google
            {%- for name, value in sceptre_user_data.environment.items() %}
            - Name: {{ name }}
              Value: {{ value }}
            {%- endfor %}
          MountPoints:
            - ContainerPath: !Ref EfsVolumeMountPath
              ReadOnly: true
              SourceVolume: !Ref EfsVolumeName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Ref TowerTaskLogGroup
              awslogs-stream-prefix: !Ref AwslogsStreamPrefix
        - Name: !Ref FrontendContainerName
          Image: !Ref FrontendContainerImage
          Memory: 2000
          Cpu: 0
          Essential: false
          PortMappings:
            - ContainerPort: !Ref FrontendContainerPort
              HostPort: !Ref FrontendHostPort
          Links:
            - !Ref BackendContainerName
          DependsOn:
            - ContainerName: !Ref BackendContainerName
              Condition: START
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Ref TowerTaskLogGroup
              awslogs-stream-prefix: !Ref AwslogsStreamPrefix
        - Name: !Ref BackendContainerName
          Hostname: !Ref BackendContainerName
          Memory: 2000
          Cpu: 0
          Image: !Ref BackendContainerImage
          PortMappings:
            - ContainerPort: !Ref BackendContainerPort
              HostPort: !Ref BackendHostPort
          Essential: false
          Links:
          {%- if sceptre_user_data.EnableRedisDocker is defined and sceptre_user_data.EnableRedisDocker %}
            - redis
          {%- endif %}
            - cron
          WorkingDirectory: /work
          DependsOn:
            - ContainerName: cron
              Condition: START
          {%- if sceptre_user_data.EnableRedisDocker is defined and sceptre_user_data.EnableRedisDocker %}
            - ContainerName: redis
              Condition: START
          {%- endif %}
          Environment:
            - Name: MICRONAUT_ENVIRONMENTS
              Value: !If
                - HasTowerOidcClient
                - prod,redis,ha,workspace,awsbatch-platform,auth-google,auth-oidc
                - prod,redis,ha,workspace,awsbatch-platform,auth-google
            {%- for name, value in sceptre_user_data.environment.items() %}
            - Name: {{ name }}
              Value: {{ value }}
            {%- endfor %}
          EntryPoint:
            - /bin/sh
          Command:
            - -c
            - /tower.sh
          MountPoints:
            - ContainerPath: !Ref EfsVolumeMountPath
              ReadOnly: true
              SourceVolume: !Ref EfsVolumeName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Ref TowerTaskLogGroup
              awslogs-stream-prefix: !Ref AwslogsStreamPrefix

Outputs:

  TaskDefinitionArn:
    Value: !Ref TowerTask
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-TaskDefinitionArn'

  FrontendContainerName:
    Value: !Ref FrontendContainerName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-FrontendContainerName'

  FrontendContainerPort:
    Value: !Ref FrontendContainerPort
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-FrontendContainerPort'
